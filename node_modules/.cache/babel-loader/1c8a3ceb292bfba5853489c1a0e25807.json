{"ast":null,"code":"var _jsxFileName = \"/Users/nikhiltiwari/InterIIT/new_crypto_brdge/pos-plasma-tutorial/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\n\nconst config = require(\"./config\");\n\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\n\nconst Network = require(\"@maticnetwork/meta/network\");\n\nconst Matic = require(\"@maticnetwork/maticjs\");\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [maticProvider, setMaticProvider] = useState();\n  const [ethereumprovider, setEthereumProvider] = useState();\n  const [balance, setBalance] = useState(0);\n  const [bridgeOptions] = useState([{\n    label: \"Proof of Stake\",\n    value: \"Proof of Stake\"\n  }, {\n    label: \"Plasma\",\n    value: \"Plasma\"\n  }]);\n  const [tokenTypes] = useState([{\n    label: \"Ether\",\n    value: \"Ether\"\n  }, {\n    label: \"ERC20\",\n    value: \"ERC20\"\n  }]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\"\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\"\n  });\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const maticProvider = new WalletConnectProvider({\n      host: config.MATIC_RPC,\n      callbacks: {\n        onConnect: console.log(\"matic connected\"),\n        onDisconnect: console.log(\"matic disconnected!\")\n      }\n    });\n    const ethereumProvider = new WalletConnectProvider({\n      host: config.ETHEREUM_RPC,\n      callbacks: {\n        onConnect: console.log(\"mainchain connected\"),\n        onDisconnect: console.log(\"mainchain disconnected\")\n      }\n    });\n    setMaticProvider(maticProvider);\n    setEthereumProvider(ethereumProvider);\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n    setNetworkid(networkId);\n\n    if (networkId === config.ETHEREUM_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.MATIC_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to  Matic or Ethereum network\");\n    }\n  }; // posClientGeneral facilitates the operations like approve, deposit, exit\n\n\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: maticProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  }; // posclientBurn facilitates the burning of tokens on the matic chain\n\n\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: ethereumprovider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  }; // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n\n\n  const getMaticPlasmaParent = async (_network = config.NETWORK, _version = config.VERSION) => {\n    const network = new Network(_network, _version);\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: window.web3,\n      maticProvider: maticProvider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    await matic.initialize();\n    return {\n      matic,\n      network\n    };\n  }; // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n\n\n  const getMaticPlasmaChild = async (_network = config.NETWORK, _version = config.VERSION) => {\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: ethereumprovider,\n      maticProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    await matic.initialize();\n    return {\n      matic\n    };\n  }; // POS ether functionality\n\n\n  const depositEther = async () => {\n    // const maticPoSClient = posClientParent();\n    const mainchain = new Web3(window.ethereum);\n    console.log(\"inputValue\", inputValue);\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    console.log(x);\n    const x1 = x.toString();\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account\n    });\n  };\n\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    console.log(\"inputValue\", inputValue);\n    const x = Number(inputValue) * 1000000000000000000;\n    console.log(x);\n    const web3 = new Web3(window.ethereum);\n    const bal = web3.eth.getBalance(\"0xbb418e7a2B5D25a8Da3BCf042308c610A3Afa52A\").then(console.log);\n    await setBalance(web3.eth.getBalance(\"0xbb418e7a2B5D25a8Da3BCf042308c610A3Afa52A\"));\n    const x1 = x.toString();\n    console.log(typeof Number(bal));\n    console.log(typeof x);\n    await maticPoSClient.burnERC20(config.posWETH, x1, {\n      from: account\n    }).then(res => {\n      console.log(res.transactionHash);\n      setBurnHash(res.transactionHash);\n    });\n  };\n\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  }; // POS ERC20 functionality\n\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account\n    });\n  };\n\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n\n  const onchange = e => {\n    setInputValue(e.target.value);\n  }; // Plasma ether functionality\n\n\n  const depositEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    const x1 = x.toString();\n    await matic.depositEther(x1, {\n      from: account\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const burnEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    const x1 = x.toString();\n    await matic.startWithdraw(config.plasmaWETH, x1, {\n      from: account\n    }).then(res => {\n      console.log(\"burn ether plasma txn hash\", res.transactionHash);\n    });\n  };\n\n  const confirmWithdrawEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.withdraw(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"Confirm withdraw hash: \", res.transactionHash);\n    });\n  };\n\n  const exitEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.processExits(config.rootChainWETH, {\n      from: account\n    }).then(res => {\n      console.log(\"process exit\", res.transactionHash);\n    });\n  }; // Plasma ERC20 functionality\n\n\n  const depositERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    const x1 = x.toString();\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n      from: account\n    });\n    return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n      from: account\n    });\n  };\n\n  const burnERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n\n    const x1 = x.toString();\n    matic.startWithdraw(config.plasmaChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n\n  const confirmWithdrawERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    matic.withdraw(inputValue, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n\n  const exitERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.processExits(config.plasmaRootERC20, {\n      from: account\n    }).then(res => {\n      console.log(\"Exit hash: \", res.transactionHash);\n    });\n  };\n\n  if (loading === true) {} else {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"POS\",\n      hidden: selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Ether\",\n      hidden: selectedToken.label === \"Ether\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositEther,\n      disabled: Networkid !== 0 && Networkid === config.MATIC_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnEther,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitEther,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC20\",\n      hidden: selectedToken.label === \"ERC20\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20,\n      disabled: Networkid !== 0 && Networkid === config.MATIC_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 13\n      }\n    }, burnHash))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"plasma\",\n      hidden: selectedBridgeOption.label === \"Plasma\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"PlasmaEther\",\n      hidden: selectedToken.label === \"Ether\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.MATIC_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: confirmWithdrawEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 13\n      }\n    }, \"Confirm Withdraw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"PlasmaERC20\",\n      hidden: selectedToken.label === \"ERC20\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MATIC_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: confirmWithdrawERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 13\n      }\n    }, \"Confirm Withdraw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 13\n      }\n    }, burnHash))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedBridgeOption({\n      label: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 9\n    }\n  }, bridgeOptions.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  }, item.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedToken({\n      label: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 9\n    }\n  }, tokenTypes.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 13\n    }\n  }, item.label)))), content);\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/nikhiltiwari/InterIIT/new_crypto_brdge/pos-plasma-tutorial/src/App.js"],"names":["React","useEffect","useState","Web3","Navbar","WalletConnectProvider","config","require","MaticPoSClient","MaticPOSClient","Network","Matic","App","loadWeb3","loadBlockchainData","content","Networkid","setNetworkid","account","setAccount","loading","setLoading","inputValue","setInputValue","burnHash","setBurnHash","maticProvider","setMaticProvider","ethereumprovider","setEthereumProvider","balance","setBalance","bridgeOptions","label","value","tokenTypes","selectedBridgeOption","setSelectedBridgeOption","selectedToken","setSelectedToken","window","ethereum","web3","enable","currentProvider","alert","host","MATIC_RPC","callbacks","onConnect","console","log","onDisconnect","ethereumProvider","ETHEREUM_RPC","accounts","eth","getAccounts","networkId","net","getId","ETHEREUM_CHAINID","MATIC_CHAINID","posClientParent","maticPoSClient","network","NETWORK","version","VERSION","parentProvider","parentDefaultOptions","from","maticDefaultOptions","posClientChild","getMaticPlasmaParent","_network","_version","matic","initialize","getMaticPlasmaChild","depositEther","mainchain","x","x1","toString","depositEtherForUser","burnEther","Number","bal","getBalance","then","burnERC20","posWETH","res","transactionHash","exitEther","exitERC20","depositERC20","approveERC20ForDeposit","posRootERC20","depositERC20ForUser","posChildERC20","onchange","e","target","depositEtherPlasma","catch","err","burnEtherPlasma","startWithdraw","plasmaWETH","confirmWithdrawEtherPlasma","withdraw","exitEtherPlasma","processExits","rootChainWETH","depositERC20Plasma","approveERC20TokensForDeposit","plasmaRootERC20","burnERC20Plasma","plasmaChildERC20","confirmWithdrawERC20Plasma","exitERC20Plasma","map","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\nconst Network = require(\"@maticnetwork/meta/network\");\nconst Matic = require(\"@maticnetwork/maticjs\");\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [maticProvider, setMaticProvider] = useState();\n  const [ethereumprovider, setEthereumProvider] = useState();\n  const [balance, setBalance] = useState(0);\n  const [bridgeOptions] = useState([\n    {\n      label: \"Proof of Stake\",\n      value: \"Proof of Stake\",\n    },\n    {\n      label: \"Plasma\",\n      value: \"Plasma\",\n    },\n  ]);\n  const [tokenTypes] = useState([\n    {\n      label: \"Ether\",\n      value: \"Ether\",\n    },\n    {\n      label: \"ERC20\",\n      value: \"ERC20\",\n    },\n  ]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\",\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\",\n  });\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const maticProvider = new WalletConnectProvider({\n      host: config.MATIC_RPC,\n      callbacks: {\n        onConnect: console.log(\"matic connected\"),\n        onDisconnect: console.log(\"matic disconnected!\"),\n      },\n    });\n\n    const ethereumProvider = new WalletConnectProvider({\n      host: config.ETHEREUM_RPC,\n      callbacks: {\n        onConnect: console.log(\"mainchain connected\"),\n        onDisconnect: console.log(\"mainchain disconnected\"),\n      },\n    });\n\n    setMaticProvider(maticProvider);\n    setEthereumProvider(ethereumProvider);\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n\n    setNetworkid(networkId);\n\n    if (networkId === config.ETHEREUM_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.MATIC_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to  Matic or Ethereum network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: maticProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: ethereumprovider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n  const getMaticPlasmaParent = async (\n    _network = config.NETWORK,\n    _version = config.VERSION\n  ) => {\n    const network = new Network(_network, _version);\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: window.web3,\n      maticProvider: maticProvider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    await matic.initialize();\n    return { matic, network };\n  };\n\n  // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n  const getMaticPlasmaChild = async (\n    _network = config.NETWORK,\n    _version = config.VERSION\n  ) => {\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: ethereumprovider,\n      maticProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    await matic.initialize();\n    return { matic };\n  };\n\n  // POS ether functionality\n\n  const depositEther = async () => {\n    // const maticPoSClient = posClientParent();\n    const mainchain = new Web3(window.ethereum);\n    console.log(\"inputValue\", inputValue);\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    console.log(x)\n    const x1 = x.toString();\n\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account,\n    });\n  };\n\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    console.log(\"inputValue\", inputValue);\n    const x = Number(inputValue) * 1000000000000000000;\n    console.log(x)\n    const web3 = new Web3(window.ethereum);\n    const bal = web3.eth.getBalance(\"0xbb418e7a2B5D25a8Da3BCf042308c610A3Afa52A\")\n    .then(console.log)\n    await setBalance(web3.eth.getBalance(\"0xbb418e7a2B5D25a8Da3BCf042308c610A3Afa52A\"))\n    const x1 = x.toString();\n    console.log(typeof(Number(bal)))\n    console.log(typeof(x))\n    await maticPoSClient\n      .burnERC20(config.posWETH, x1, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(res.transactionHash);\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account,\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account,\n    });\n  };\n\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n  const onchange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  // Plasma ether functionality\n  const depositEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic\n      .depositEther(x1, {\n        from: account,\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const burnEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic\n      .startWithdraw(config.plasmaWETH, x1, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"burn ether plasma txn hash\", res.transactionHash);\n      });\n  };\n\n  const confirmWithdrawEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .withdraw(inputValue, { from: account})\n      .then((res) => {\n        console.log(\"Confirm withdraw hash: \", res.transactionHash);\n      });\n  };\n\n  const exitEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .processExits(config.rootChainWETH, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"process exit\", res.transactionHash);\n      });\n  };\n\n  // Plasma ERC20 functionality\n  const depositERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n      from: account,\n    });\n    return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n      from: account,\n    });\n  };\n  const burnERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    matic\n      .startWithdraw(config.plasmaChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const confirmWithdrawERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    matic\n      .withdraw(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const exitERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .processExits(config.plasmaRootERC20, { from: account })\n      .then((res) => {\n        console.log(\"Exit hash: \", res.transactionHash);\n      });\n  };\n  if (loading === true) {\n  } else {\n    content = (\n      <div>\n        <div\n          id=\"POS\"\n          hidden={\n            selectedBridgeOption.label === \"Proof of Stake\" ? false : true\n          }\n        >\n          <div\n            id=\"Ether\"\n            hidden={\n              selectedToken.label === \"Ether\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.MATIC_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC20\"\n            hidden={\n              selectedToken.label === \"ERC20\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MATIC_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n\n        <div\n          id=\"plasma\"\n          hidden={selectedBridgeOption.label === \"Plasma\" ? false : true}\n        >\n          <div\n            id=\"PlasmaEther\"\n            hidden={selectedToken.label === \"Ether\" ? false : true}\n          >\n            <button\n              onClick={depositEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MATIC_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"PlasmaERC20\"\n            hidden={selectedToken.label === \"ERC20\" ? false : true}\n          >\n            <button\n              onClick={depositERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MATIC_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ETHEREUM_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Navbar account={account} />\n      <div>\n        <select\n          onChange={(e) => setSelectedBridgeOption({ label: e.target.value })}\n        >\n          {bridgeOptions.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <select onChange={(e) => setSelectedToken({ label: e.target.value })}>\n          {tokenTypes.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {content}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}